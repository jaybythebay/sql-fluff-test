#name: Lint and Fix Formatting
#on: [push]
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: true
#      matrix:
#        python-version: ["3.9"]
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v3
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8 pytest
#          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

name: sqlfluff with reviewdog
on:
  pull_request:
  test-check:
    name: runner / sqlfluff (github-check)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: yu-iskw/action-sqlfluff@v3
        id: lint-sql
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          sqlfluff_version: "0.13.0"
          sqlfluff_command: "fix" # Or "lint"
          config: "jaybythebay/sql-fluff-test/.sqlfluff"
          paths: 'jaybythebay/sql-fluff-test/models'
      - name: 'Show outputs (Optional)'
        shell: bash
        run: |
          echo '${{ steps.lint-sql.outputs.sqlfluff-results }}' | jq -r '.'
          echo '${{ steps.lint-sql.outputs.sqlfluff-results-rdjson }}' | jq -r '.'
##      https://discourse.getdbt.com/t/running-sqlfluff-fix-on-prs-as-a-github-action-with-inline-suggestions/4174
#       - uses: yu-iskw/action-sqlfluff@v3
##        if: steps.check.outputs.triggered == 'true'
#          id: lint-sql
#          with:
#            github_token: ${{ secrets.github_token }}
#            reporter: github-pr-review
#            sqlfluff_version: "0.11.1"
#            sqlfluff_command: "fix" # Or "lint"
#            config: "${{ github.workspace }}/.sqlfluff"
#            paths: '${{ github.workspace }}/models'

#      - name: Get changed files
#        id: get_file_changes
#        uses: trilom/file-changes-action@v1.2.4
#        with:
#          output: ' '
#
#      - name: Get new and changed .sql files in /models to lint
#        id: get_files_to_lint
#        shell: bash -l {0}
#        run: |
#          # Set the command in the $() brackets as an output to use in later steps
#          echo "::set-output name=lintees::$(
#          # Issue where grep regular expressions don't work as expected on the
#          # Github Actions shell, check models/ folder
#          echo \
#          $(echo ${{ steps.get_file_changes.outputs.files_modified }} |
#          tr -s ' ' '\n' |
#          grep -E '^models.*[.]sql$' |
#          tr -s '\n' ' ') \
#          $(echo ${{ steps.get_file_changes.outputs.files_added }} |
#          tr -s ' ' '\n' |
#          grep -E '^models.*[.]sql$' |
#          tr -s '\n' ' ')
#          )"

#      - name: Lint models
#        run: "sqlfluff lint ."

      - name: Lint dbt models
        if: steps.get_files_to_lint.outputs.lintees != ''
        shell: bash -l {0}
        run: |
          sqlfluff lint --format github-annotation --annotation-level failure ${{ steps.get_files_to_lint.outputs.lintees }} > annotations.json
            

#    steps:
#      - uses: "actions/checkout@v2"
#      - uses: "actions/setup-python@v2"
#        with:
#          python-version: "3.8"
#      - name: Install Requirements
#        run: "pip install sqlfluff==0.3.6"
#      - name: Lint models
#        run: "sqlfluff lint models"
#    steps:
#      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
#      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#      - name: Check out repository code
#        uses: actions/checkout@v3
#      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
#      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
#      - name: List files in the repository
#        run: |
#          ls ${{ github.workspace }}
#      - run: echo "🍏 This job's status is ${{ job.status }}."
#
#
#
